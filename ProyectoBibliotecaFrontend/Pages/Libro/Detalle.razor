@page "/detalleprestamo/ver/{id:int}"
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject ILocalStorageService _localStorageService

<MudText Typo="Typo.h2" Class="ml">Detalles del Préstamo</MudText>

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.subtitle1">Préstamo ID</MudText>
                    <MudText Typo="Typo.body1">@detallePrestamo.PrestamoId</MudText>

                    <MudText Typo="Typo.subtitle1">Libro Título</MudText>
                    <MudText Typo="Typo.body1">@detallePrestamo.Libro.Titulo</MudText>

                    <MudText Typo="Typo.subtitle1">Fecha de Devolución</MudText>
                    <MudText Typo="Typo.body1">@detallePrestamo.FechaDevolucion.ToShortDateString()</MudText>

                    <MudDivider />
                </MudCardContent>
                <MudCardActions>
                    <MudButton Href="@($"/detalleprestamo/index")" Variant="Variant.Filled" Color="Color.Info" Class="text-center">Regresar</MudButton>
                </MudCardActions>
            </MudCard>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    [Parameter]
    public int id { get; set; }
    private DetallePrestamo detallePrestamo = new DetallePrestamo();
    private IEnumerable<Prestamo> prestamos = new List<Prestamo>();
    private IEnumerable<Libro> libros = new List<Libro>();

    protected override async Task OnInitializedAsync()
    {
        // Agregar encabezado de autenticación con token
        httpClient.DefaultRequestHeaders.Authorization =
            new AuthenticationHeaderValue("Bearer", await _localStorageService.GetItemAsync<string>("token"));

        // Obtener detalles del préstamo por ID
        var respDetallePrestamo = await httpClient.GetStringAsync($"detalle-prestamos/{id}");
        detallePrestamo = JsonSerializer.Deserialize<DetallePrestamo>(respDetallePrestamo, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

        // Cargar préstamos y libros (si es necesario para mostrar información relacionada)
        await cargarPrestamos();
        await cargarLibros();
    }

    private async Task cargarPrestamos()
    {
        var resp = await httpClient.GetStringAsync("prestamos/lista");
        prestamos = JsonSerializer.Deserialize<IEnumerable<Prestamo>>(resp, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
    }

    private async Task cargarLibros()
    {
        var resp = await httpClient.GetStringAsync("libros/lista");
        libros = JsonSerializer.Deserialize<IEnumerable<Libro>>(resp, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
    }
}
