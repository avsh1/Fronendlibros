@page "/libro/agregar"

@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject ILocalStorageService _localStorageService

<MudText Typo="Typo.h2" Class="ml">Nuevo Libro</MudText>
<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <EditForm Model="libro" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <MudCard>
                    <MudCardContent>
                        <MudTextField Label="Título" @bind-Value="libro.Titulo" For="@(() => libro.Titulo)" />
                        <MudTextField Label="Fecha de Publicación" @bind-Value="libro.Publicacion" For="@(() => libro.Publicacion)" />
                    </MudCardContent>
                    <MudDivider />
                    <MudCardContent>
                        <MudSelect Variant="Variant.Outlined" Label="Autor" AnchorOrigin="Origin.BottomCenter"
                                   @bind-Value="autorSeleccionado">
                            @foreach (var item in autores)
                            {
                                <MudSelectItem Value="@item.Id">@item.Nombre</MudSelectItem>
                            }
                        </MudSelect>
                        <MudDivider />

                        <MudSelect Variant="Variant.Outlined" Label="Editorial" AnchorOrigin="Origin.BottomCenter"
                                   @bind-Value="editorialSeleccionada">
                            @foreach (var item in editoriales)
                            {
                                <MudSelectItem Value="@item.Id">@item.Nombre</MudSelectItem>
                            }
                        </MudSelect>
                        <MudDivider />

                        <MudSelect Variant="Variant.Outlined" Label="Categoría" AnchorOrigin="Origin.BottomCenter"
                                   @bind-Value="categoriaSeleccionada">
                            @foreach (var item in categorias)
                            {
                                <MudSelectItem Value="@item.Id">@item.Nombre</MudSelectItem>
                            }
                        </MudSelect>
                    </MudCardContent>

                    <MudCardActions>
                        <MudButton Href="@($"/libro/index")" Variant="Variant.Filled" Color="Color.Info" Class="text-center">Regresar</MudButton>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Guardar</MudButton>
                    </MudCardActions>
                </MudCard>
            </EditForm>
            @if (showLeaveAlert)
            {
                <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true" CloseIconClicked="(() => CloseMe(true))">No se pudo guardar.</MudAlert>
            }
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private IEnumerable<Autor> autores = new List<Autor>();
    private IEnumerable<Editorial> editoriales = new List<Editorial>();
    private IEnumerable<Categoria> categorias = new List<Categoria>();

    private bool showLeaveAlert = false;
    private Libro libro = new Libro();
    private int autorSeleccionado;
    private int editorialSeleccionada;
    private int categoriaSeleccionada;

    protected override async Task OnInitializedAsync()
    {
        httpClient.DefaultRequestHeaders.Authorization =
            new AuthenticationHeaderValue("Bearer", await _localStorageService.GetItemAsync<string>("token"));
        await getAutores();
        await getEditoriales();
        await getCategorias();
    }

    private async Task OnValidSubmit(EditContext context)
    {
        if (autorSeleccionado == 0 || editorialSeleccionada == 0 || categoriaSeleccionada == 0)
        {
            showLeaveAlert = true;
            return; // Sale del método si no hay un autor/editorial/categoría seleccionada
        }
        await save();
        StateHasChanged();
    }

    private async Task save()
    {
        libro.Autor_Id = autorSeleccionado;
        libro.EditorialId = editorialSeleccionada;
        libro.Categoria_Id = categoriaSeleccionada;

        var httpResponse = await httpClient.PostAsJsonAsync<Libro>("libros", libro);

        if (!(httpResponse.StatusCode == System.Net.HttpStatusCode.OK))
        {
            showLeaveAlert = true;
        }
        else
        {
            navigationManager.NavigateTo("libro/index");
        }
    }

    private void CloseMe(bool value)
    {
        showLeaveAlert = false;
    }

    private async Task getAutores()
    {
        var httpResponse = await httpClient.GetStringAsync("autores/lista");
        autores = JsonSerializer.Deserialize<IEnumerable<Autor>>(httpResponse, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
    }

    private async Task getEditoriales()
    {
        var httpResponse = await httpClient.GetStringAsync("editoriales/lista");
        editoriales = JsonSerializer.Deserialize<IEnumerable<Editorial>>(httpResponse, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
    }

    private async Task getCategorias()
    {
        var httpResponse = await httpClient.GetStringAsync("categorias/lista");
        categorias = JsonSerializer.Deserialize<IEnumerable<Categoria>>(httpResponse, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
    }
}
