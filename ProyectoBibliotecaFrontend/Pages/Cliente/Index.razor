@page "/cliente/index"
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject ILocalStorageService _localStorageService

<MudText Typo="Typo.h2" Class="ml">Clientes</MudText>

<MudTable Items="@filteredClientes" Dense="true" Hover="true" Bordered="true" Striped="true">
    <ToolBarContent>
        <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="goAdd" />
        <MudSpacer />
        <MudTextField @bind-Value="searchText" Placeholder="Buscar por nombre o correo" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" />
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Nombre</MudTh>
        <MudTh>Dirección</MudTh>
        <MudTh>Correo</MudTh>
        <MudTh>Teléfono</MudTh>
        <MudTh>Fecha de Registro</MudTh>
        <MudTh>Estado</MudTh>
        <MudTh>Acciones</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Nombre">@context.Nombre</MudTd>
        <MudTd DataLabel="Dirección">@context.Direccion</MudTd>
        <MudTd DataLabel="Correo">@context.Correo</MudTd>
        <MudTd DataLabel="Teléfono">@context.Telefono</MudTd>
        <MudTd DataLabel="Fecha de Registro">@context.FechaRegistro.ToShortDateString()</MudTd>
        <MudTd DataLabel="Estado">@context.Estado ? "Activo" : "Inactivo"</MudTd>

        <MudTd>
            <MudButton Href="@($"/cliente/editar/{context.Id}")" Size="Size.Small" Variant="Variant.Outlined"
                       Color="Color.Tertiary" Class="text-center">Editar</MudButton>
            <MudButton Href="@($"/cliente/eliminar/{context.Id}")" Size="Size.Small" Variant="Variant.Outlined"
                       Color="Color.Warning" Class="text-center">Eliminar</MudButton>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private IEnumerable<Cliente> clientes = new List<Cliente>();
    private IEnumerable<Cliente> filteredClientes =>
        string.IsNullOrWhiteSpace(searchText)
            ? clientes
            : clientes.Where(c => c.Nombre.Contains(searchText, StringComparison.OrdinalIgnoreCase)
                                  || c.Correo.Contains(searchText, StringComparison.OrdinalIgnoreCase));

    private string searchText = "";

    protected override async Task OnInitializedAsync()
    {
        httpClient.DefaultRequestHeaders.Authorization =
            new AuthenticationHeaderValue("Bearer", await _localStorageService.GetItemAsync<string>("token"));
        await getAll();
    }

    private async Task getAll()
    {
        var httpResponse = await httpClient.GetStringAsync("cliente/lista");
        clientes = JsonSerializer.Deserialize<IEnumerable<Cliente>>(httpResponse, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
    }

    private void goAdd()
    {
        navigationManager.NavigateTo("cliente/agregar");
    }
}

