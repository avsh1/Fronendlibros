@page "/prestamo/eliminar/{id:int}"

@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject ILocalStorageService _localStorageService

<MudText Typo="Typo.h2" Class="ml">Eliminar Préstamo</MudText>

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <EditForm Model="prestamo" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <MudCard>
                    <MudCardContent>
                        <MudTextField Label="Libro" @bind-Value="prestamo.Libro.Titulo" For="@(() => prestamo.Libro.Titulo)" Disabled="true" />
                        <MudTextField Label="Cliente" @bind-Value="prestamo.Cliente.Nombre" For="@(() => prestamo.Cliente.Nombre)" Disabled="true" />
                        <MudTextField Label="Status" @bind-Value="prestamo.Status" For="@(() => prestamo.Status)" Disabled="true" />
                        <MudTextField Label="Fecha de Préstamo" @bind-Value="prestamo.FechaPrestamo" For="@(() => prestamo.FechaPrestamo)" InputType="InputType.Date" Disabled="true" />
                        <MudTextField Label="Fecha de Devolución" @bind-Value="prestamo.FechaDevolucion" For="@(() => prestamo.FechaDevolucion)" InputType="InputType.Date" Disabled="true" />
                        <MudTextField Label="Encargado" @bind-Value="prestamo.Encargado" For="@(() => prestamo.Encargado)" Disabled="true" />
                        <MudDivider />
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Href="@($"/prestamo/index")" Variant="Variant.Filled" Color="Color.Info" Class="text-center">Regresar</MudButton>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Error" Class="ml-auto">Eliminar</MudButton>
                    </MudCardActions>
                </MudCard>
            </EditForm>
            @if (showLeaveAlert)
            {
                <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true" CloseIconClicked="(() => CloseMe(true))">Ocurrió un problema.</MudAlert>
            }
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    [Parameter]
    public int id { get; set; }
    private bool showLeaveAlert = false;
    Prestamo prestamo = new Prestamo();

    protected override async Task OnInitializedAsync()
    {
        httpClient.DefaultRequestHeaders.Authorization =
            new AuthenticationHeaderValue("Bearer", await _localStorageService.GetItemAsync<string>("token"));

        var resp = await httpClient.GetStringAsync("prestamos/" + id);
        prestamo = JsonSerializer.Deserialize<Prestamo>(resp, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
    }

    private async Task OnValidSubmit(EditContext context)
    {
        await eliminar();
    }

    private async Task eliminar()
    {
        var httpResponse = await httpClient.DeleteAsync("prestamos/" + prestamo.Id);

        if (!(httpResponse.StatusCode == System.Net.HttpStatusCode.OK))
        {
            showLeaveAlert = true;
        }
        else
        {
            navigationManager.NavigateTo("prestamo/index");
        }
    }

    private void CloseMe(bool value)
    {
        showLeaveAlert = false;
    }
}
